Index: src/persistence/ManagerDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package persistence;\r\n\r\nimport edu.unbosque.AnimalesDto;\r\nimport edu.unbosque.model.EmptyAttributeException;\r\nimport edu.unbosque.model.IdentifierExistsException;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\npublic class ManagerDao {\r\n\r\n    private ArrayList<AnimalesDto> animales = new ArrayList<>();\r\n    private OperacionArchivo operacion;\r\n\r\n    public static void main(String[] args) {\r\n\r\n        ManagerDao ma = new ManagerDao();\r\n        //System.out.println(\"las localidades correctas son: USAQUEN\");\r\n        //ma.countByNeighborhoo(\"USAQUEN\");\r\n        //ma.countBySpecies();\r\n        //ma.assingId();\r\n        //ma.findByMultipleFields(20, \"TOP\", \"CANINO\", \"MACHO\", \"MEDIANO\", true, \"USAQUEN\");\r\n\r\n        ma.findByMicrochip(900113000007963l);\r\n    }\r\n\r\n\r\n\r\n    public ManagerDao() {\r\n        animales = new ArrayList<>();\r\n        operacion = new OperacionArchivo();\r\n    }\r\n\r\n    public void assingId() throws IOException {\r\n        animales = operacion.leerCsv();\r\n        String id = \"\";\r\n        String newid;\r\n        int cont = 0;\r\n        char c, d;\r\n        System.out.println(\"Asignando id\");\r\n        for (int i = 0; i < animales.size(); i++) {\r\n            if (animales.get(i).getSize() == \"MUY GRANDE\") {\r\n                animales.get(i).setSize(\"GRANDE\");\r\n            }\r\n            id = String.valueOf(animales.get(i).getMicrochip()).charAt(String.valueOf(animales.get(i).getMicrochip()).length() - 2) + \"\" + String.valueOf(animales.get(i).getMicrochip()).charAt(String.valueOf(animales.get(i).getMicrochip()).length() - 1) + \"-\" + animales.get(i).getSpecies().charAt(0) + animales.get(i).getSex().charAt(0) + animales.get(i).getSize().charAt(0) + String.valueOf(animales.get(i).isPotentDangerous());\r\n            if (id.charAt(6) == 't') {\r\n\r\n                id = id.replace(\"t\", \"T\");\r\n                id = id.replace(\"r\", \"\");\r\n                id = id.replace(\"u\", \"\");\r\n                id = id.replace(\"e\", \"\");\r\n            } else {\r\n                id = id.replace(\"f\", \"F\");\r\n                id = id.replace(\"a\", \"\");\r\n                id = id.replace(\"l\", \"\");\r\n                id = id.replace(\"s\", \"\");\r\n                id = id.replace(\"e\", \"\");\r\n\r\n\r\n            }\r\n            animales.get(i).setId(id);\r\n            cont = 0;\r\n        }\r\n        System.out.println(id);\r\n        for (int a = 1; a < animales.size(); a++) {\r\n            for (int j = a - 1; j >= 0; j--) {\r\n                try {\r\n\r\n                    if (animales.get(a).getId().equals(animales.get(j).getId()) == true) {\r\n                        cont++;\r\n                        throw new IdentifierExistsException();\r\n\r\n                    }\r\n\r\n\r\n                } catch (IdentifierExistsException e) {\r\n\r\n                    newid = String.valueOf(animales.get(j).getMicrochip()).charAt(String.valueOf(animales.get(j).getMicrochip()).length() - (cont + 2)) + animales.get(j).getId();\r\n                    animales.get(j).setId(newid);\r\n                }\r\n\r\n            }\r\n            cont = 0;\r\n        }\r\n        System.out.println(\"Proceso terminado\");\r\n\r\n        for (int i = 0; i < animales.size(); i++) {\r\n            System.out.println(animales.get(i).getId());\r\n        }\r\n    }\r\n\r\n\r\n    public AnimalesDto findByMicrochip(long microchip) {\r\n        AnimalesDto mascota = new AnimalesDto();\r\n        int i = 0;\r\n        for (AnimalesDto animale : animales) {\r\n            System.out.println(microchip);\r\n            mascota = animales.get(i);\r\n            i = animales.size();\r\n            i++;\r\n        }\r\n        System.out.println(mascota);\r\n        return mascota;\r\n    }\r\n\r\n    public void countBySpecies() throws IOException {\r\n        animales = operacion.leerCsv();\r\n        String especie = null;\r\n        int contcan = 0, contfel = 0;\r\n        especie = animales.get(0).getSpecies();\r\n        for (int i = 0; i < animales.size(); i++) {\r\n\r\n            if (animales.get(i).getSpecies().equals(especie) == true) {\r\n\r\n                contfel++;\r\n            } else {\r\n                especie = animales.get(i).getSpecies();\r\n                contcan++;\r\n            }\r\n        }\r\n\r\n        System.out.println(\"Los \" + especie + \"S son: \" + contcan);\r\n        System.out.println(\"Los \" + animales.get(0).getSpecies() + \"S son: \" + contfel);\r\n    }\r\n\r\n    public void countByNeighborhood(String neighborhoo) throws EmptyAttributeException, IOException {\r\n        animales = operacion.leerCsv();\r\n        int cont = 0;\r\n        boolean aux = false;\r\n\r\n        for (int i = 0; i < animales.size(); i++) {\r\n            if (neighborhoo.equals(animales.get(i).getNeighborhood()) == true) {\r\n                aux = true;\r\n                cont++;\r\n            }\r\n        }\r\n        if (aux == false) {\r\n            System.out.println(\"La localidad no está bien escrita o no está dentro de la lista\");\r\n        } else {\r\n            System.out.println(neighborhoo + \" son:\" + cont);\r\n        }\r\n    }\r\n\r\n    public ArrayList<AnimalesDto> findByMultipleFields(int n, String position, String species, String sex, String size, boolean potentDangerous, String neighborhood) throws EmptyAttributeException, IOException {\r\n        animales = operacion.leerCsv();\r\n        ArrayList<AnimalesDto> busqueda = new ArrayList<>();\r\n        if (species != null) {\r\n            for (int i = 0; i < animales.size(); i++) {\r\n                if (species.equals(animales.get(i).getSpecies()) == true) {\r\n                    busqueda.add(animales.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sex != null) {\r\n            if (species == null) {\r\n                for (int i = 0; i < animales.size(); i++) {\r\n                    if (sex.equals(animales.get(i).getSex()) == true) {\r\n                        busqueda.add(animales.get(i));\r\n                    }\r\n                }\r\n            } else {\r\n                for (int i = 0; i < busqueda.size(); i++) {\r\n                    if (sex.equals(busqueda.get(i).getSex()) == false) {\r\n                        busqueda.remove(i);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (size != null) {\r\n            if (species == null && sex == null) {\r\n                for (int i = 0; i < animales.size(); i++) {\r\n                    if (size.equals(animales.get(i).getSize()) == true) {\r\n                        busqueda.add(animales.get(i));\r\n                    }\r\n                }\r\n            } else {\r\n                for (int i = 0; i < busqueda.size(); i++) {\r\n                    if (size.equals(busqueda.get(i).getSize()) == false) {\r\n                        busqueda.remove(i);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!String.valueOf(potentDangerous).isBlank()) {\r\n            if (species == null && sex == null && size == null) {\r\n                for (int i = 0; i < animales.size(); i++) {\r\n                    if (potentDangerous == animales.get(i).isPotentDangerous()) {\r\n                        busqueda.add(animales.get(i));\r\n                    }\r\n                }\r\n            } else {\r\n                for (int i = 0; i < busqueda.size(); i++) {\r\n                    if (potentDangerous != busqueda.get(i).isPotentDangerous()) {\r\n                        busqueda.remove(i);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (neighborhood != null) {\r\n            if (species == null && sex == null && size == null && neighborhood == null) {\r\n                for (int i = 0; i < animales.size(); i++) {\r\n                    if (neighborhood.equals(animales.get(i).getNeighborhood()) == true) {\r\n                        busqueda.add(animales.get(i));\r\n                    }\r\n                }\r\n            } else {\r\n                for (int i = 0; i < busqueda.size(); i++) {\r\n                    if (neighborhood.equals(busqueda.get(i).getNeighborhood()) == false) {\r\n                        busqueda.remove(i);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (position != null) {\r\n            if (position.equals(\"TOP\") == true) {\r\n                for (int i = 0; i < busqueda.size(); i++) {\r\n                    System.out.println(busqueda.get(i));\r\n                }\r\n            } else {\r\n                for (int i = busqueda.size() - 1; i >= 0; i--) {\r\n                    System.out.println(busqueda.add(busqueda.get(i)));\r\n                }\r\n            }\r\n        } else {\r\n            System.out.println(\"Debe indicar el orden para mostrar los datos: TOP| LAST\");\r\n        }\r\n        if (String.valueOf(n) != null) {\r\n            busqueda = (ArrayList<AnimalesDto>) busqueda.subList(0, n);\r\n            Iterator iter = busqueda.iterator();\r\n            while (iter.hasNext()){\r\n                return busqueda;\r\n            }\r\n        }\r\n\r\n        return busqueda;\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/src/persistence/ManagerDao.java b/src/persistence/ManagerDao.java
--- a/src/persistence/ManagerDao.java	
+++ b/src/persistence/ManagerDao.java	
@@ -147,6 +147,7 @@
     public ArrayList<AnimalesDto> findByMultipleFields(int n, String position, String species, String sex, String size, boolean potentDangerous, String neighborhood) throws EmptyAttributeException, IOException {
         animales = operacion.leerCsv();
         ArrayList<AnimalesDto> busqueda = new ArrayList<>();
+
         if (species != null) {
             for (int i = 0; i < animales.size(); i++) {
                 if (species.equals(animales.get(i).getSpecies()) == true) {
